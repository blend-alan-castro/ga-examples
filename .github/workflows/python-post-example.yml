name: Python POST Request Example

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-post:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install requests library
      run: pip install requests
      
    - name: Make POST request with Python
      run: |
        python3 -c "
        import requests
        import json
        import os
        from datetime import datetime
        
        # Prepare the data
        data = {
            'message': 'Hello from Python GitHub Action',
            'repository': os.environ['GITHUB_REPOSITORY'],
            'branch': os.environ['GITHUB_REF_NAME'],
            'commit': os.environ['GITHUB_SHA'],
            'actor': os.environ['GITHUB_ACTOR'],
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'workflow': os.environ['GITHUB_WORKFLOW']
        }
        
        # Headers
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {os.environ[\"API_TOKEN\"]}',
            'User-Agent': 'GitHub-Actions-Python'
        }
        
        try:
            response = requests.post(
                os.environ.get('API_ENDPOINT', 'https://httpbin.org/post'),
                json=data,
                headers=headers,
                timeout=30
            )
            
            print(f'Status Code: {response.status_code}')
            print(f'Response: {response.text}')
            
            if response.status_code >= 400:
                print('Request failed!')
                exit(1)
                
        except requests.exceptions.RequestException as e:
            print(f'Error making request: {e}')
            exit(1)
        "
      env:
        API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
        
    - name: POST with form data
      run: |
        python3 -c "
        import requests
        import os
        
        # Form data
        form_data = {
            'name': 'GitHub Action Python',
            'status': 'success',
            'repository': os.environ['GITHUB_REPOSITORY'],
            'branch': os.environ['GITHUB_REF_NAME']
        }
        
        try:
            response = requests.post(
                os.environ.get('FORM_ENDPOINT', 'https://httpbin.org/post'),
                data=form_data,
                timeout=30
            )
            
            print(f'Form POST Status: {response.status_code}')
            print(f'Response: {response.text}')
            
        except requests.exceptions.RequestException as e:
            print(f'Error: {e}')
            exit(1)
        "
      env:
        FORM_ENDPOINT: ${{ secrets.FORM_ENDPOINT }}
        
    - name: POST with file upload
      run: |
        python3 -c "
        import requests
        import os
        import tempfile
        
        # Create a temporary file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write('This is a test file from Python GitHub Action\\n')
            f.write(f'Repository: {os.environ[\"GITHUB_REPOSITORY\"]}\\n')
            f.write(f'Commit: {os.environ[\"GITHUB_SHA\"]}\\n')
            temp_file = f.name
        
        try:
            with open(temp_file, 'rb') as f:
                files = {'file': ('test.txt', f, 'text/plain')}
                data = {'description': 'Test file from Python GitHub Action'}
                
                response = requests.post(
                    os.environ.get('FILE_UPLOAD_URL', 'https://httpbin.org/post'),
                    files=files,
                    data=data,
                    timeout=30
                )
                
                print(f'File upload status: {response.status_code}')
                print(f'Response: {response.text}')
                
        except requests.exceptions.RequestException as e:
            print(f'Error: {e}')
            exit(1)
        finally:
            os.unlink(temp_file)
        "
      env:
        FILE_UPLOAD_URL: ${{ secrets.FILE_UPLOAD_URL }}
