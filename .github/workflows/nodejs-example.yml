name: Node.js Request Example

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  nodejs-get:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm init -y && npm install axios
      
    - name: Make GET request with Node.js to Authentication Status endpoint
      run: |
        echo "üìç Using endpoint: ${{ secrets.API_ENDPOINT }}/authentication-status"
        node -e "
        const axios = require('axios');
        
        async function makeGetRequest() {
          try {
            const response = await axios.get('${{ secrets.API_ENDPOINT }}/authentication-status', {
              headers: {
                'Authorization': 'Bearer ${{ secrets.API_TOKEN }}',
                'blend-target-instance': '${{ secrets.TENANT }}'
              }
            });
            
            console.log('Response status:', response.status);
            console.log('Response data:', response.data);
            
            // Check for error messages in response
            if (response.data && response.data.error) {
              console.error('‚ùå API returned an error:', response.data);
              process.exit(1);
            }
          } catch (error) {
            console.error('Error:', error.message);
            if (error.response) {
              console.error('Response status:', error.response.status);
              console.error('Response data:', error.response.data);
            }
            process.exit(1);
          }
        }
        
        makeGetRequest();
        "
        
    - name: Make GET request with Node.js to Closings endpoint
      run: |
        echo "üìç Using endpoint: ${{ secrets.API_ENDPOINT }}/close/closings?applicationId=aa9fdaa2-7bf3-4411-a836-c2a46117f5c3"
        node -e "
        const axios = require('axios');
        
        async function makeGetRequest() {
          try {
            const response = await axios.get('${{ secrets.API_ENDPOINT }}/close/closings?applicationId=aa9fdaa2-7bf3-4411-a836-c2a46117f5c3', {
              headers: {
                'Authorization': 'Bearer ${{ secrets.API_TOKEN }}',
                'blend-target-instance': '${{ secrets.TENANT }}'
              }
            });
            
            console.log('Response status:', response.status);
            console.log('Response data:', response.data);
            
            // Check for error messages in response
            if (response.data && response.data.error) {
              console.error('‚ùå API returned an error:', response.data);
              process.exit(1);
            }
          } catch (error) {
            console.error('Error:', error.message);
            process.exit(1);
          }
        }
        
        makeGetRequest();
        "
        
    - name: Make POST request with Node.js to Applications endpoint
      run: |
        echo "üìç Using endpoint: ${{ secrets.API_ENDPOINT }}/home-lending/applications"
        node -e "
        const axios = require('axios');
        
        async function makePostRequest() {
          try {
            const response = await axios.post('${{ secrets.API_ENDPOINT }}/home-lending/applications', {
              solutionSubType: 'MORTGAGE',
              party: {
                name: {
                  firstName: 'Alan ',
                  lastName: 'Test GA'
                },
                taxpayerIdentifier: {
                  type: 'SOCIAL_SECURITY_NUMBER',
                  value: '000113933'
                },
                email: 'alan-castro+athenaai@blend.com',
                dateOfBirth: '1995-10-03T20:07:27+00:00'
              },
              redirect: true,
              sendEmailInvite: true,
              applicationSource: {
                type: 'LOS'
              },
              applicationExperienceType: 'FULL_APPLICATION',
              loanPurposeType: 'PURCHASE',
              locPurposeType: 'HOME_PURCHASE',
              homeEquityLoanPurposeType: 'HOME_PURCHASE',
              lienPriorityType: 'FIRST_LIEN',
              paymentType: 'INTEREST_ONLY',
              loanAmount: 100000,
              communityId: '12345',
              leadId: 'leadId1',
              crmId: 'crmLead1',
              losId: 'Loan-12391',
              referenceNumber: 124123,
              applicationTemplateId: 'fd658b97-f901-4b14-b693-4654d276c909',
              appSource: 'ORGANIC_LEAD',
              interestRate: 4.25,
              mortgageType: 'CONVENTIONAL',
              branchIdOverride: '12345'
            }, {
              headers: {
                'Content-Type': 'application/json',
                'accept': 'application/json; charset=utf-8',
                'Authorization': 'Bearer ${{ secrets.API_TOKEN }}',
                'blend-api-version': '10.0.0',
                'blend-target-instance': '${{ secrets.TENANT }}',
                'cache-control': 'no-cache'
              }
            });
            
            console.log('Response status:', response.status);
            console.log('Response data:', response.data);
            
            // Check for error messages in response
            if (response.data && response.data.error) {
              console.error('‚ùå API returned an error:', response.data);
              process.exit(1);
            }
            
            // Extract application ID from response for use in closing
            if (response.data && response.data.id) {
              console.log('üìù Extracted Application ID:', response.data.id);
              // Write to file for next step to read
              require('fs').writeFileSync('application_id.txt', response.data.id);
            } else {
              console.log('‚ö†Ô∏è  Could not extract application ID from response');
              // Write fallback to file
              require('fs').writeFileSync('application_id.txt', '4c77ef2b-5c13-42fd-96c7-a811996795e2');
            }
          } catch (error) {
            console.error('Error:', error.message);
            if (error.response) {
              console.error('Response status:', error.response.status);
              console.error('Response data:', error.response.data);
            }
            process.exit(1);
          }
        }
        
        makePostRequest();
        "
        
    - name: Set Application ID from file
      run: |
        if [ -f application_id.txt ]; then
          APPLICATION_ID=$(cat application_id.txt)
          echo "üìù Using Application ID from file: $APPLICATION_ID"
          echo "APPLICATION_ID=$APPLICATION_ID" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è  Application ID file not found, using fallback"
          echo "APPLICATION_ID=4c77ef2b-5c13-42fd-96c7-a811996795e2" >> $GITHUB_ENV
        fi
        
    - name: Upsert Closing with Node.js
      run: |
        echo "üìç Using endpoint: ${{ secrets.API_ENDPOINT }}/close/closings"
        node -e "
        const axios = require('axios');
        
        async function upsertClosing() {
          try {
            const response = await axios.put('${{ secrets.API_ENDPOINT }}/close/closings', {
              closingParties: [
                {
                  email: 'alan-castro+sa@blend.com',
                  firstName: 'Alan',
                  lastName: 'SA',
                  partyType: 'SETTLEMENT'
                }
              ],
              applicationId: '${{ env.APPLICATION_ID }}',
              closingType: 'HYBRID',
              closingStart: '2025-10-29T00:00:00-04:00',
              closingEnd: '2025-10-30T00:00:00-04:00',
              scheduledCeremonyTime: '2025-10-29T00:00:00-04:00',
              timezone: 'America/New_York'
            }, {
              headers: {
                'Content-Type': 'application/json',
                'accept': 'application/json; charset=utf-8',
                'Authorization': 'Bearer ${{ secrets.API_TOKEN }}',
                'blend-api-version': '10.0.0',
                'blend-target-instance': '${{ secrets.TENANT }}',
                'cache-control': 'no-cache'
              }
            });
            
            console.log('Response status:', response.status);
            console.log('Response data:', response.data);
            
            // Check for error messages in response
            if (response.data && response.data.error) {
              console.error('‚ùå API returned an error:', response.data);
              process.exit(1);
            }
          } catch (error) {
            console.error('Error:', error.message);
            if (error.response) {
              console.error('Response status:', error.response.status);
              console.error('Response data:', error.response.data);
            }
            process.exit(1);
          }
        }
        
        upsertClosing();
        "
